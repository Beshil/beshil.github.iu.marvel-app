{"version":3,"sources":["components/pages/SinglePage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js"],"names":["SinglePage","_ref","Component","dataType","id","useParams","data","setData","useState","getComic","getCharacter","clearError","process","setProcess","useMarvelService","useEffect","updateData","then","onDataLoaded","Error","_jsxs","_Fragment","children","_jsx","AppBanner","setContent","ErrorMessage","style","display","width","height","objectFit","margin","src","img","alt","request","useHttp","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","concat","status","json","e","_apiBase","_apiKey","_transformCharacter","char","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComics","title","pageCount","language","textObjects","price","prices","getAllCharacters","offset","res","results","map","getCharacterByName","getAllComics","Skeleton","className","Spinner","avengers","avengersLogo"],"mappings":"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","file":"static/js/6.6ee1c1c1.chunk.js","sourcesContent":["import { useParams } from \"react-router-dom\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\nimport setContent from \"../../utils/setContent\";\r\n\r\nconst SinglePage = ({ Component, dataType }) => {\r\n  const { id } = useParams();\r\n  const [data, setData] = useState(null);\r\n  const { getComic, getCharacter, clearError, process, setProcess } =\r\n    useMarvelService();\r\n\r\n  useEffect(() => {\r\n    updateData();\r\n    // eslint-disable-next-line\r\n  }, [id]);\r\n\r\n  const updateData = () => {\r\n    clearError();\r\n\r\n    switch (dataType) {\r\n      case \"comic\":\r\n        getComic(id)\r\n          .then(onDataLoaded)\r\n          .then(() => setProcess(\"confirmed\"));\r\n        break;\r\n      case \"character\":\r\n        getCharacter(id)\r\n          .then(onDataLoaded)\r\n          .then(() => setProcess(\"confirmed\"));\r\n        break;\r\n      default:\r\n        throw new Error(\"Error\");\r\n    }\r\n  };\r\n\r\n  const onDataLoaded = (data) => {\r\n    setData(data);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AppBanner />\r\n      {setContent(process, Component, data)}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SinglePage;\r\n","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n  const { request, clearError, process, setProcess } = useHttp();\r\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n  const _apiKey = 'apikey=c5d6fc8b83116d92ed468ce36bac6c62';\r\n  const _baseOffset = 210;\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(\r\n      `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n    );\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  };\r\n\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getAllComics = async (offset = 0) => {\r\n    const res = await request(\r\n      `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n    );\r\n    return res.data.results.map(_transformComics);\r\n  };\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComics(res.data.results[0]);\r\n  };\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description\r\n        ? `${char.description.slice(0, 210)}...`\r\n        : 'There is no description for this character',\r\n      thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || 'There is no description',\r\n      pageCount: comics.pageCount\r\n        ? `${comics.pageCount} p.`\r\n        : 'No information about the number of pages',\r\n      thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n      language: comics.textObjects.language || 'en-us',\r\n      price: comics.prices.price ? `${comics.prices.price}$` : 'not available',\r\n    };\r\n  };\r\n\r\n  return {\r\n    process,\r\n    setProcess,\r\n    clearError,\r\n    getAllCharacters,\r\n    getCharacter,\r\n    getCharacterByName,\r\n    getAllComics,\r\n    getComic,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [process, setProcess] = useState(\"waiting\");\r\n\r\n  const request = useCallback(\r\n    async (\r\n      url,\r\n      method = \"GET\",\r\n      body = null,\r\n      headers = { \"Content-Type\": \"application/json\" }\r\n    ) => {\r\n      setProcess(\"loading\");\r\n\r\n      try {\r\n        const response = await fetch(url, { method, body, headers });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        return data;\r\n      } catch (e) {\r\n        setProcess(\"error\");\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = useCallback(() => setProcess(\"loading\"), []);\r\n\r\n  return { request, clearError, process, setProcess };\r\n};\r\n","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <>\r\n            <p className=\"char__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Skeleton/>;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n        case 'confirmed':\r\n            return <Component data={data}/>;\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\r\nimport avengers from '../../resources/img/Avengers.png';\r\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\r\n\r\nconst AppBanner = () => {\r\n    return (\r\n        <div className=\"app__banner\">\r\n            <img src={avengers} alt=\"Avengers\"/>\r\n            <div className=\"app__banner-text\">\r\n                New comics every week!<br/>\r\n                Stay tuned!\r\n            </div>\r\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppBanner;"],"sourceRoot":""}